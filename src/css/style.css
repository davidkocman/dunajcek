/*
 * Get values from deeper levels of a map
 *
 * 1. Return false instead of causing error when the map doesn't exist
 */
/*
 * Returns an asset url.
 */
/*
 * Returns base font-size and line-height in rem from variables.
 */
/*
 * Get the cap-height of a font
 */
/*
 * Returns hex value of a characters or multiple characters.
 * 1. Fallback is an empty string.
 * 2. Warns, if you try to use an undefined character.
 */
/*
 * Returns white or black color contrasting to input color
 */
/*
 * Returns custom value from variables
 */
/*
 * Get font style from variables.
 */
/*
 * Returns icon from variables.
 * 1. Fallback is an empty string.
 */
/*
 * Returns an image asset url.
 */
/*
 * When getting value for a breakpoint and it's not defined for this breakpoint
 * return the value from nearest lower breakpoint where it is defined
 *
 * 1. Check if the last value in input represents a breakpoint.
 */
/*
 * Returns number of lines into which minimal line height of this font-size 
 * fits in
 * 1. allow half line based on current configuration from variables
 */
/*
 * Returns ratio from variables
 */
/*
 * Returns ratio for a breakpoint from variables.
 *
 * 1. If the ratio is not defined for this exact breakpoint.
 * 2. Get the ratio inherited from the nearest lower resolution breakpoint.
 */
/*
 * Returns speed from variables.
 * 1. Unitless number is converted to tick unit. 
 * 2. Time unit is return without processing
 * 3. String value is get from variables
 */
/*
 * Get the x-height of a font
 */
/*
 * Replace '$search' with '$replace' in '$string'
 */
/*
 * Strip out unit from a number
 */
/*
 * Convert yes/no to boolean
 */
/*
 * Converts px or rem to em
 */
/*
 * Converts input value to a list.
 */
/*
 * Converts input value to a map.
 */
/*
Converts value to px
Examples:
    px(16px)
        returns 16px
    px(1em), px(1rem)
        returns base font size in px
    px(1)
        returns base line-height(rhythm) in px
 */
/*
 * Converts input value to a string.
 */
/*
 * Returns breakpoint in em
 *
 * 1. Get breakpoint from variables.
 *    1.1 Breakpoint value can point to another breakpoint variabe, so
 *        check the variables one more time. 
 * 2. Return single value in em.
 * 3. Return two values in em.
 *    3.1 Second value is lowered by 1px so the styles will not interfere
 *         with the styles of the next breakpoint.
 */
/*
 * Convert input value to percentage
 *
 * 1. Convert unitless value to %
 * 2. Return percentage value without processing
 * 3. Get percentage from 2 input values
 *
 * Example usage:
 * width: p(25);
 * width: p(25%);
 * width: p(3 / 12);
 * width: p(3 of 12);
 * Outputs:
 * width: 25%;
 */
/*
 * Shorthand for rhythm() function
 */
/*
 * Get rhythm units (base-line-height) in rem.
 *
 * 1. Unitless number stands for number of base-line-heights.
 * 2. Round sizes to nearest rhythm size
 * 3. Allow rounding to nearest half rhythm size based on current configuration
 * 4. Return result in rem
 */
/*
 * Convert input value to vh
 *
 * 1. Convert unitless value to vh
 * 2. Get percentage and convert it to vh
 *
 * Example usage:
 * width: vh(3 of 12);
 * width: vh(3 / 12);
 * width: vh(25);
 * Outputs:
 * width: 25vh;
 */
/*
 * Convert input value to vw
 *
 * 1. Convert unitless value to vw
 * 2. Get percentage and convert it to vw
 *
 * Example usage:
 * width: vw(3 of 12);
 * width: vw(3 / 12);
 * width: vw(25);
 * Outputs:
 * width: 25vw;
 */
/*
 * Get first value from the list
 */
/*
 * Get last value from the list
 */
/*
 * Get values from deeper levels of a map
 *
 * 1. Return false instead of causing error when the map doesn't exist
 */
/*
Examples:
@include position(0);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
@include position(0 1rem);
    top: 0;
    right: 1rem;
    bottom: 0;
    left: 1rem;
@include position(0 1rem _);
    top: 0;
    right: 1rem;
    left: 1rem;
@include position(0 _ _ 1rem);
    top: 0;
    left: 1rem;
*/
/* usage:
@include ellipsis(n)
*/
/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: local("Titillium Web Regular"), local("TitilliumWeb-Regular"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPecZTIAOhVxoMyOr9n_E7fdM3mDbRS.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: local("Titillium Web Regular"), local("TitilliumWeb-Regular"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPecZTIAOhVxoMyOr9n_E7fdMPmDQ.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: local("Titillium Web Bold"), local("TitilliumWeb-Bold"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffHjDGIVzY4SY.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: local("Titillium Web Bold"), local("TitilliumWeb-Bold"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffHjDGItzYw.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 900;
  font-display: swap;
  src: local("Titillium Web Black"), local("TitilliumWeb-Black"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffEDBGIVzY4SY.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 900;
  font-display: swap;
  src: local("Titillium Web Black"), local("TitilliumWeb-Black"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffEDBGItzYw.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

a,
abbr,
article,
aside,
acronym,
address,
applet,
audio,
b,
big,
blockquote,
body,
button,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
figcaption,
figure,
fieldset,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
hr,
html,
i,
iframe,
img,
input,
ins,
kbd,
label,
legend,
li,
main,
mark,
menu,
nav,
object,
ol,
optgroup,
output,
p,
picture,
pre,
q,
ruby,
s,
samp,
section,
select,
small,
span,
strike,
strong,
summary,
table,
tbody,
td,
textarea,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  background: transparent;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  border: 0;
  font: inherit;
  font-size: 100%;
  margin: 0;
  min-width: 0;
  padding: 0;
  vertical-align: baseline;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
}

::before,
::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

html {
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  overflow-x: hidden;
}

main,
details,
summary {
  display: block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

template {
  display: none;
}

a {
  text-decoration: none;
}

a,
button,
input[type=button],
input[type=reset],
input[type=submit] {
  cursor: pointer;
}

a,
input,
button,
select,
textarea {
  color: inherit;
}

a:active, a:focus,
input:active,
input:focus,
button:active,
button:focus,
select:active,
select:focus,
textarea:active,
textarea:focus {
  outline: none;
}

dfn,
i,
em {
  font-style: normal;
}

del {
  text-decoration: line-through;
}

sub,
sup {
  font-size: 1em;
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

caption {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q,
blockquote {
  quotes: none;
}

q::before, q::after,
blockquote::before,
blockquote::after {
  content: "";
  content: none;
}

img {
  display: block;
}

svg:not(:root) {
  overflow: hidden;
}

hr {
  height: 0;
}

pre {
  overflow: auto;
  white-space: pre;
}

pre code {
  white-space: pre-wrap;
  word-wrap: normal;
}

code {
  white-space: pre;
}

code,
kbd,
pre,
samp {
  font-size: inherit;
}

button {
  overflow: visible;
}

button,
select {
  text-transform: none;
  border-radius: 0;
  background: transparent;
}

select {
  -moz-appearance: none;
  -webkit-appearance: none;
}

select::-ms-expand {
  display: none;
}

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

button:disabled,
input:disabled {
  cursor: default;
}

input::-moz-focus-inner,
button::-moz-focus-inner {
  border: 0;
  outline: none;
  padding: 0;
}

input {
  line-height: normal;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

textarea {
  overflow: auto;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

th,
td {
  text-align: left;
  font-weight: inherit;
  vertical-align: middle;
}

.content {
  margin-top: 5rem;
  padding: 3.375rem 8%;
}

.content .intro {
  min-height: 100vh;
}

.content .intro .h {
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 0.875rem;
  letter-spacing: 0;
  text-transform: uppercase;
  color: #162848;
}

.content .intro .h span {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
}

.content .intro .logo {
  margin-bottom: 3.875rem;
}

.content .intro p {
  margin-bottom: 1.25rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2rem;
  color: #23344e;
  letter-spacing: 0;
}

.content .intro p.bold {
  font-weight: 700;
  font-style: normal;
  color: #162848;
}

.content .intro .icons {
  -webkit-column-gap: 2.5rem;
     -moz-column-gap: 2.5rem;
          column-gap: 2.5rem;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.content .intro .icons .icon {
  height: 10.125rem;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
}

.content .intro .icons .icon img {
  margin-bottom: 0.375rem;
  width: 6.625rem;
  height: 6rem;
}

.content .intro .icons .icon span {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1rem;
  color: #162848;
  letter-spacing: 0;
  text-align: center;
}

.content .intro .scroll {
  margin: 0 auto;
  max-width: 8.875rem;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.content .intro .scroll span {
  margin-bottom: 1.5rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.75rem;
  line-height: 1rem;
  color: #23344e;
  letter-spacing: 0;
  text-align: center;
}

.content .intro .scroll img {
  -webkit-animation: vertical 3s ease infinite;
          animation: vertical 3s ease infinite;
}

@-webkit-keyframes vertical {
  0%,
  60%,
  80%,
  100% {
    -webkit-transform: translateY(0);
  }
  20% {
    -webkit-transform: translateY(-5px);
  }
  40% {
    -webkit-transform: translateY(20px);
  }
}

@keyframes vertical {
  0%,
  60%,
  80%,
  100% {
    -webkit-transform: translateY(0);
  }
  20% {
    -webkit-transform: translateY(-5px);
  }
  40% {
    -webkit-transform: translateY(20px);
  }
}

.content .aktivity h2 {
  margin-bottom: 0.875rem;
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.content .aktivity h3 {
  margin-bottom: 0.75rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #1c2d48;
  letter-spacing: 0;
}

.content .aktivity p {
  margin-bottom: 1.875rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.625rem;
  color: #475262;
  letter-spacing: 0;
}

.content .aktivity img {
  margin: 2.5rem auto;
}

.content .firma h2 {
  margin-bottom: 0.875rem;
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.content .firma h3 {
  margin-bottom: 1.25rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2.125rem;
  color: #162848;
  letter-spacing: 0;
}

.content .firma p {
  margin-bottom: 1.875rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.625rem;
  color: #475262;
  letter-spacing: 0;
}

body {
  background-color: #f8fbff;
}

body,
html {
  height: 100%;
}

main {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: -webkit-max-content;
  grid-template-rows: max-content;
  grid-template-areas: "slider content" "footer footer";
}

.slider {
  grid-area: slider;
}

.content {
  grid-area: content;
}

.footer {
  grid-area: footer;
}

.footer {
  height: 100vh;
  display: grid;
  grid-template-columns: 1fr 1fr;
}

.footer .map {
  background-color: white;
  z-index: 1;
}

.footer .data {
  padding: 3.375rem 8%;
  background-color: white;
}

.footer .data h2 {
  margin-bottom: 0.875rem;
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.footer .data p {
  margin-bottom: 1.25rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2.125rem;
  color: #162848;
  letter-spacing: 0;
}

.footer .data h3 {
  margin-bottom: 0.625rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #1c2d48;
  letter-spacing: 0;
}

.footer .data h3 span {
  text-transform: uppercase;
}

.footer .data ul {
  margin-bottom: 7.5rem;
}

.footer .data ul li {
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2.25rem;
  color: #23344e;
  letter-spacing: 0;
}

.footer .data ul li span {
  font-weight: 700;
  font-style: normal;
}

.footer .data img {
  margin: 0 auto;
  max-width: 39.375rem;
}

nav {
  top: 0;
  right: 0;
  left: 50%;
  position: fixed;
  z-index: 1;
  padding-right: 4%;
  padding-left: 4%;
  width: auto;
  height: 5rem;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  background-color: white;
  -webkit-box-shadow: 0 10px 20px 0 rgba(227, 230, 237, 0.6);
          box-shadow: 0 10px 20px 0 rgba(227, 230, 237, 0.6);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

nav .element {
  top: 0;
  left: -80px;
  position: absolute;
  z-index: 1;
  width: 5rem;
  height: 5rem;
  background-color: white;
}

nav .element span {
  position: relative;
}

nav .element span::before, nav .element span::after {
  width: 5rem;
  height: 5rem;
  background-color: rgba(255, 255, 255, 0.3);
  content: '';
}

nav .element span::before {
  top: 0;
  left: -80px;
  position: absolute;
}

nav .element span::after {
  top: 5rem;
  bottom: -80px;
  position: absolute;
}

nav ul {
  width: 100%;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

nav ul li a {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.5rem;
  color: #162848;
  letter-spacing: 1px;
  text-transform: uppercase;
}

nav ul li a.active {
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  border-bottom: 2px solid #ef5350;
}

nav ul li a:focus, nav ul li a:hover {
  border-bottom: 2px solid #ef5350;
}

.slider {
  max-height: 100vh;
  position: -webkit-sticky;
  top: 0;
  position: sticky;
  z-index: 0;
  overflow: hidden;
}

.slider img {
  min-height: 100vh;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
