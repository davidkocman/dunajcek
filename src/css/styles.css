/*
 * Get values from deeper levels of a map
 *
 * 1. Return false instead of causing error when the map doesn't exist
 */
/*
 * Returns an asset url.
 */
/*
 * Returns base font-size and line-height in rem from variables.
 */
/*
 * Get the cap-height of a font
 */
/*
 * Returns hex value of a characters or multiple characters.
 * 1. Fallback is an empty string.
 * 2. Warns, if you try to use an undefined character.
 */
/*
 * Returns white or black color contrasting to input color
 */
/*
 * Returns custom value from variables
 */
/*
 * Get font style from variables.
 */
/*
 * Returns icon from variables.
 * 1. Fallback is an empty string.
 */
/*
 * Returns an image asset url.
 */
/*
 * When getting value for a breakpoint and it's not defined for this breakpoint
 * return the value from nearest lower breakpoint where it is defined
 *
 * 1. Check if the last value in input represents a breakpoint.
 */
/*
 * Returns number of lines into which minimal line height of this font-size 
 * fits in
 * 1. allow half line based on current configuration from variables
 */
/*
 * Returns ratio from variables
 */
/*
 * Returns ratio for a breakpoint from variables.
 *
 * 1. If the ratio is not defined for this exact breakpoint.
 * 2. Get the ratio inherited from the nearest lower resolution breakpoint.
 */
/*
 * Returns speed from variables.
 * 1. Unitless number is converted to tick unit. 
 * 2. Time unit is return without processing
 * 3. String value is get from variables
 */
/*
 * Get the x-height of a font
 */
/*
 * Replace '$search' with '$replace' in '$string'
 */
/*
 * Strip out unit from a number
 */
/*
 * Convert yes/no to boolean
 */
/*
 * Converts px or rem to em
 */
/*
 * Converts input value to a list.
 */
/*
 * Converts input value to a map.
 */
/*
Converts value to px
Examples:
    px(16px)
        returns 16px
    px(1em), px(1rem)
        returns base font size in px
    px(1)
        returns base line-height(rhythm) in px
 */
/*
 * Converts input value to a string.
 */
/*
 * Returns breakpoint in em
 *
 * 1. Get breakpoint from variables.
 *    1.1 Breakpoint value can point to another breakpoint variabe, so
 *        check the variables one more time. 
 * 2. Return single value in em.
 * 3. Return two values in em.
 *    3.1 Second value is lowered by 1px so the styles will not interfere
 *         with the styles of the next breakpoint.
 */
/*
 * Convert input value to percentage
 *
 * 1. Convert unitless value to %
 * 2. Return percentage value without processing
 * 3. Get percentage from 2 input values
 *
 * Example usage:
 * width: p(25);
 * width: p(25%);
 * width: p(3 / 12);
 * width: p(3 of 12);
 * Outputs:
 * width: 25%;
 */
/*
 * Shorthand for rhythm() function
 */
/*
 * Get rhythm units (base-line-height) in rem.
 *
 * 1. Unitless number stands for number of base-line-heights.
 * 2. Round sizes to nearest rhythm size
 * 3. Allow rounding to nearest half rhythm size based on current configuration
 * 4. Return result in rem
 */
/*
 * Convert input value to vh
 *
 * 1. Convert unitless value to vh
 * 2. Get percentage and convert it to vh
 *
 * Example usage:
 * width: vh(3 of 12);
 * width: vh(3 / 12);
 * width: vh(25);
 * Outputs:
 * width: 25vh;
 */
/*
 * Convert input value to vw
 *
 * 1. Convert unitless value to vw
 * 2. Get percentage and convert it to vw
 *
 * Example usage:
 * width: vw(3 of 12);
 * width: vw(3 / 12);
 * width: vw(25);
 * Outputs:
 * width: 25vw;
 */
/*
 * Get first value from the list
 */
/*
 * Get last value from the list
 */
/*
 * Get values from deeper levels of a map
 *
 * 1. Return false instead of causing error when the map doesn't exist
 */
/*
Examples:
@include position(0);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
@include position(0 1rem);
    top: 0;
    right: 1rem;
    bottom: 0;
    left: 1rem;
@include position(0 1rem n);
    top: 0;
    right: 1rem;
    left: 1rem;
@include position(0 n n 1rem);
    top: 0;
    left: 1rem;
*/
/* usage:
@include ellipsis(n)
*/
/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: local("Titillium Web Regular"), local("TitilliumWeb-Regular"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPecZTIAOhVxoMyOr9n_E7fdM3mDbRS.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: local("Titillium Web Regular"), local("TitilliumWeb-Regular"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPecZTIAOhVxoMyOr9n_E7fdMPmDQ.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: local("Titillium Web Bold"), local("TitilliumWeb-Bold"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffHjDGIVzY4SY.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: local("Titillium Web Bold"), local("TitilliumWeb-Bold"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffHjDGItzYw.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

/* latin-ext */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 900;
  font-display: swap;
  src: local("Titillium Web Black"), local("TitilliumWeb-Black"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffEDBGIVzY4SY.woff2) format("woff2");
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}

/* latin */
@font-face {
  font-family: 'Titillium Web';
  font-style: normal;
  font-weight: 900;
  font-display: swap;
  src: local("Titillium Web Black"), local("TitilliumWeb-Black"), url(https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffEDBGItzYw.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

a,
abbr,
article,
aside,
acronym,
address,
applet,
audio,
b,
big,
blockquote,
body,
button,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
figcaption,
figure,
fieldset,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
hr,
html,
i,
iframe,
img,
input,
ins,
kbd,
label,
legend,
li,
main,
mark,
menu,
nav,
object,
ol,
optgroup,
output,
p,
picture,
pre,
q,
ruby,
s,
samp,
section,
select,
small,
span,
strike,
strong,
summary,
table,
tbody,
td,
textarea,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  background: transparent;
  box-sizing: border-box;
  border: 0;
  font: inherit;
  font-size: 100%;
  margin: 0;
  min-width: 0;
  padding: 0;
  vertical-align: baseline;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
}

::before,
::after {
  box-sizing: border-box;
}

html {
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  overflow-x: hidden;
}

main,
details,
summary {
  display: block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

template {
  display: none;
}

a {
  text-decoration: none;
}

a,
button,
input[type=button],
input[type=reset],
input[type=submit] {
  cursor: pointer;
}

a,
input,
button,
select,
textarea {
  color: inherit;
}

a:active, a:focus,
input:active,
input:focus,
button:active,
button:focus,
select:active,
select:focus,
textarea:active,
textarea:focus {
  outline: none;
}

dfn,
i,
em {
  font-style: normal;
}

del {
  text-decoration: line-through;
}

sub,
sup {
  font-size: 1em;
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

caption {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q,
blockquote {
  quotes: none;
}

q::before, q::after,
blockquote::before,
blockquote::after {
  content: "";
  content: none;
}

img {
  display: block;
}

svg:not(:root) {
  overflow: hidden;
}

hr {
  height: 0;
}

pre {
  overflow: auto;
  white-space: pre;
}

pre code {
  white-space: pre-wrap;
  word-wrap: normal;
}

code {
  white-space: pre;
}

code,
kbd,
pre,
samp {
  font-size: inherit;
}

button {
  overflow: visible;
}

button,
select {
  text-transform: none;
  border-radius: 0;
  background: transparent;
}

select {
  -moz-appearance: none;
  -webkit-appearance: none;
}

select::-ms-expand {
  display: none;
}

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

button:disabled,
input:disabled {
  cursor: default;
}

input::-moz-focus-inner,
button::-moz-focus-inner {
  border: 0;
  outline: none;
  padding: 0;
}

input {
  line-height: normal;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

textarea {
  overflow: auto;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

th,
td {
  text-align: left;
  font-weight: inherit;
  vertical-align: middle;
}

.content {
  margin-top: 6rem;
  padding: 3.375rem 1.25rem;
}

@media (min-width: 48em) {
  .content {
    padding: 3.375rem 12%;
  }
}

.content .intro {
  min-height: calc(100vh - 160px);
  position: relative;
}

.content .intro .h {
  margin-bottom: 1rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 0.875rem;
  letter-spacing: 0;
  text-transform: uppercase;
  color: #162848;
}

@media (min-width: 30em) {
  .content .intro .h {
    margin-bottom: 0;
  }
}

.content .intro .h span {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
}

.content .intro .logo {
  margin-bottom: 3.875rem;
}

.content .intro .logo img {
  max-width: 100%;
}

.content .intro p {
  margin-bottom: 1.25rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2rem;
  color: #23344e;
  letter-spacing: 0;
}

.content .intro p.bold {
  font-weight: 700;
  font-style: normal;
  font-size: 1.25rem;
  line-height: 2.25rem;
  color: #162848;
}

.content .intro .swiper-container.mobile {
  margin: 2rem auto;
  display: block;
}

@media (min-width: 80em) {
  .content .intro .swiper-container.mobile {
    display: none;
  }
}

.content .intro .icons {
  margin-top: 2rem;
  grid-gap: 2.5rem;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

@media (min-width: 40em) {
  .content .intro .icons {
    grid-template-columns: repeat(4, 1fr);
  }
}

.content .intro .icons .icon {
  height: 10.125rem;
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.content .intro .icons .icon img {
  margin-bottom: 0.375rem;
  width: 6.625rem;
  height: 6rem;
}

.content .intro .icons .icon span {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1rem;
  color: #162848;
  letter-spacing: 0;
  text-align: center;
}

.content .intro .scroll {
  bottom: 20px;
  left: 50%;
  position: absolute;
  margin: 0 auto;
  max-width: 8.875rem;
  align-items: center;
  display: none;
  flex-direction: column;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
}

@media (min-width: 48em) {
  .content .intro .scroll {
    display: flex;
  }
}

.content .intro .scroll span {
  margin-bottom: 1.5rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.75rem;
  line-height: 1rem;
  color: #23344e;
  letter-spacing: 0;
  text-align: center;
}

.content .intro .scroll img {
  -webkit-animation: vertical 3s ease infinite;
          animation: vertical 3s ease infinite;
}

@-webkit-keyframes vertical {
  0%,
  60%,
  80%,
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
  }
  20% {
    -webkit-transform: translateY(-5px);
            transform: translateY(-5px);
  }
  40% {
    -webkit-transform: translateY(20px);
            transform: translateY(20px);
  }
}

@keyframes vertical {
  0%,
  60%,
  80%,
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
  }
  20% {
    -webkit-transform: translateY(-5px);
            transform: translateY(-5px);
  }
  40% {
    -webkit-transform: translateY(20px);
            transform: translateY(20px);
  }
}

.content .intro .scroll span,
.content .intro .scroll img {
  pointer-events: none;
}

.content .aktivity {
  margin-top: 1.875rem;
}

.content .aktivity h2 {
  margin-bottom: 0.875rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.content .aktivity h3 {
  margin-bottom: 0.75rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #1c2d48;
  letter-spacing: 0;
}

.content .aktivity p {
  margin-bottom: 1.875rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.625rem;
  color: #475262;
  letter-spacing: 0;
}

.content .aktivity img {
  margin: 2.5rem auto;
}

.content .firma h2 {
  margin-bottom: 0.875rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.content .firma h3 {
  margin-bottom: 1.25rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.25rem;
  line-height: 2.25rem;
  color: #162848;
  letter-spacing: 0;
}

.content .firma p {
  margin-bottom: 1.875rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.625rem;
  color: #475262;
  letter-spacing: 0;
}

.content .firma p a {
  font-weight: 700;
  font-style: normal;
}

.content .firma p a:focus, .content .firma p a:hover {
  text-decoration: underline;
}

.content .firma .certs {
  -webkit-column-gap: 0;
          column-gap: 0;
  display: grid;
  grid-template-columns: 1fr 1fr;
}

@media (min-width: 30em) {
  .content .firma .certs {
    -webkit-column-gap: 3.75rem;
            column-gap: 3.75rem;
  }
}

.content .firma .certs .cert object {
  max-width: 100%;
}

.content .firma .certs .cert object img {
  max-width: 100%;
}

.content .firma .certs .cert:nth-child(2) {
  display: grid;
  justify-content: flex-end;
}

html.menu-visible {
  overflow: hidden;
}

body {
  background-color: #f8fbff;
}

body,
html {
  height: 100%;
}

main {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: -webkit-max-content;
  grid-template-rows: max-content;
  grid-template-areas: "slider content" "footer footer";
}

@media (min-width: 80em) {
  main {
    grid-template-columns: 1fr 1fr;
  }
}

.slider {
  grid-area: slider;
}

.content {
  grid-area: content;
}

.footer {
  grid-area: footer;
}

.footer {
  height: 100vh;
  display: grid;
  grid-template-columns: 1fr;
}

@media (min-width: 80em) {
  .footer {
    grid-template-columns: 1fr 1fr;
  }
}

.footer .map {
  height: 40.625rem;
  background-color: white;
  order: 2;
  z-index: 1;
}

@media (min-width: 80em) {
  .footer .map {
    width: auto;
    height: auto;
    order: unset;
  }
}

.footer .data {
  padding: 1rem 1.25rem;
  background-color: white;
}

@media (min-width: 48em) {
  .footer .data {
    padding: 3.375rem 12%;
  }
}

.footer .data h2 {
  margin-bottom: 0.875rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.875rem;
  line-height: 3rem;
  color: #162848;
  letter-spacing: 0;
}

.footer .data p {
  margin-bottom: 1.25rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.25rem;
  line-height: 2.25rem;
  color: #162848;
  letter-spacing: 0;
}

.footer .data h3 {
  margin-bottom: 0.625rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #1c2d48;
  letter-spacing: 0;
}

.footer .data h3 span {
  text-transform: uppercase;
}

.footer .data ul {
  margin-bottom: 7.5rem;
}

.footer .data ul li {
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2.25rem;
  color: #23344e;
  letter-spacing: 0;
}

.footer .data ul li span {
  font-weight: 700;
  font-style: normal;
}

.footer .data ul li a:focus, .footer .data ul li a:hover {
  text-decoration: underline;
}

.footer .data img {
  margin: 0 auto;
  max-width: 100%;
  display: none;
}

@media (min-width: 48em) {
  .footer .data img {
    display: block;
  }
}

.mobile-nav {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  position: fixed;
  z-index: 3;
  min-height: 100%;
  padding-right: 2.5rem;
  padding-left: 2.5rem;
  width: 100%;
  background-color: #f8fbff;
  overflow-y: auto;
  opacity: 0;
  transition: opacity 200ms ease-in-out;
  visibility: hidden;
}

.menu-visible .mobile-nav {
  opacity: 1;
  visibility: visible;
}

.mobile-nav .clouds {
  top: 0;
  left: 0;
  position: absolute;
}

.mobile-nav__items {
  padding-top: 11.875rem;
}

.mobile-nav__items .links {
  margin-bottom: 2.375rem;
  padding-right: 1.25rem;
  padding-left: 1.25rem;
  padding-bottom: 1.75rem;
  border-bottom: 1px solid #d8d8d8;
  color: #162848;
  list-style-type: disc;
}

.mobile-nav__items .links li {
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.25rem;
  line-height: 3rem;
  letter-spacing: 1px;
  text-transform: uppercase;
}

.mobile-nav__items .h {
  margin-bottom: 0.375rem;
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #162848;
}

.mobile-nav__items ul {
  margin-bottom: 7.5rem;
}

.mobile-nav__items ul li {
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 2.25rem;
  color: #23344e;
  letter-spacing: 0;
}

.mobile-nav__items ul li span {
  font-weight: 700;
  font-style: normal;
}

.nav-toggle {
  align-items: center;
  display: flex;
}

.mobile-nav .nav-toggle {
  top: 27px;
  right: 20px;
  position: absolute;
}

@media (min-width: 48em) {
  .nav-toggle {
    display: none;
  }
}

.nav-toggle span {
  margin-right: 0.5rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.75rem;
  line-height: 1.5rem;
  color: #23344e;
  letter-spacing: 0;
}

.nav-toggle .close {
  width: 1.625rem;
  height: 1.625rem;
  align-items: center;
  border: 2px solid black;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  position: relative;
}

.nav-toggle .close::before, .nav-toggle .close::after {
  position: absolute;
  width: 0.75rem;
  height: 0.125rem;
  background-color: black;
  content: '';
  display: block;
}

.nav-toggle .close::before {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

.nav-toggle .close::after {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}

nav {
  top: 0;
  right: 0;
  left: 0;
  position: fixed;
  z-index: 2;
  padding-right: 1.25rem;
  padding-left: 1.25rem;
  width: auto;
  height: 5rem;
  align-items: center;
  background-color: #f8fbff;
  box-shadow: 0 10px 20px 0 rgba(227, 230, 237, 0.6);
  display: flex;
  justify-content: space-between;
}

@media (min-width: 48em) {
  nav {
    padding-right: 12%;
    padding-left: 12%;
    justify-content: center;
  }
}

@media (min-width: 80em) {
  nav {
    padding-right: 6%;
    padding-left: 6%;
    top: 0;
    right: 0;
    left: 50%;
    position: fixed;
    z-index: 1;
  }
}

nav .element {
  top: 0;
  left: -80px;
  position: absolute;
  z-index: 1;
  width: 5rem;
  height: 5rem;
  background-color: white;
}

nav .element span {
  position: relative;
}

nav .element span::before, nav .element span::after {
  width: 5rem;
  height: 5rem;
  background-color: rgba(255, 255, 255, 0.3);
  content: '';
}

nav .element span::before {
  top: 0;
  left: -80px;
  position: absolute;
}

nav .element span::after {
  top: 80px;
  bottom: -80px;
  position: absolute;
}

@media (min-width: 48em) {
  nav .logo {
    display: none;
  }
}

nav .logo img {
  max-width: 7.875rem;
}

nav ul {
  width: 100%;
  display: none;
  justify-content: space-between;
}

@media (min-width: 48em) {
  nav ul {
    display: flex;
  }
}

nav ul li a {
  font-weight: 700;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.875rem;
  line-height: 1.5rem;
  color: #162848;
  letter-spacing: 1px;
  text-transform: uppercase;
}

nav ul li a.active {
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
}

nav ul li a:hover {
  border-bottom: 2px solid #ef5350;
}

.slider {
  max-height: 100vh;
  position: -webkit-sticky;
  top: 0;
  position: sticky;
  z-index: 0;
  display: none;
  overflow: hidden;
}

@media (min-width: 80em) {
  .slider {
    display: block;
  }
}

.slider object {
  min-height: 100vh;
}

.slider object img {
  min-height: 100vh;
}

.slider .swiper-container {
  width: 100%;
  height: 100vh;
}

.swiper-container {
  width: 100%;
  position: relative;
}

.swiper-container .swiper-slide object {
  width: 100%;
}

.swiper-container .swiper-slide object img {
  width: 100%;
}

.swiper-container .swiper-slide button {
  top: 50%;
  left: 50%;
  position: absolute;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
}

.swiper-container .swiper-slide button:focus svg, .swiper-container .swiper-slide button:hover svg {
  -webkit-transform: scale(1.2);
          transform: scale(1.2);
}

.swiper-container .swiper-slide button svg {
  transition: all 200ms ease-in-out;
}

.swiper-container.mobile .swiper-pagination {
  padding-left: 1.875rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 0.75rem;
  line-height: 1.5rem;
}

.swiper-container.mobile .swiper-navigation {
  width: 7.5rem;
  height: 3.75rem;
}

.swiper-container .swiper-navigation {
  right: 0;
  bottom: 0;
  position: absolute;
  z-index: 1;
  width: 10rem;
  height: 5rem;
  align-items: center;
  background-color: white;
  display: grid;
  grid-template-columns: 1fr 1fr;
}

.swiper-container .swiper-navigation::before {
  left: 50%;
  position: absolute;
  z-index: 1;
  width: 1px;
  height: 1.625rem;
  content: '';
  background-color: black;
}

.swiper-container .swiper-navigation .next {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}

.swiper-container .swiper-navigation .next,
.swiper-container .swiper-navigation .prev {
  width: 100%;
  height: 100%;
  align-items: center;
  cursor: pointer;
  display: flex;
  justify-content: center;
}

.swiper-container .swiper-navigation .next svg,
.swiper-container .swiper-navigation .prev svg {
  width: 1.125rem;
  height: 0.625rem;
  transition: all 200ms ease-in-out;
}

.swiper-container .swiper-navigation .next::after,
.swiper-container .swiper-navigation .prev::after {
  content: '';
}

.swiper-container .swiper-navigation .next:focus svg, .swiper-container .swiper-navigation .next:hover svg,
.swiper-container .swiper-navigation .prev:focus svg,
.swiper-container .swiper-navigation .prev:hover svg {
  -webkit-transform: scale(1.2);
          transform: scale(1.2);
}

.swiper-container .swiper-pagination {
  padding-left: 3.75rem;
  font-weight: 400;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 1rem;
  line-height: 1.5rem;
  color: white;
  text-align: left;
  letter-spacing: .5px;
  z-index: 1;
}

.swiper-container .swiper-pagination .swiper-pagination-current {
  font-weight: 900;
  font-style: normal;
  font-family: "Titillium Web", sans-serif;
  font-size: 2.5rem;
  line-height: 3rem;
  letter-spacing: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
